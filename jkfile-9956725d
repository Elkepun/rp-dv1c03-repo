pipeline {

    agent any

    stages {

        stage('ST1-9956725d') {

            steps {

                echo 'Setup Release Environment Completed.'

            }

        }

        stage('ST2-9956725d') {
    steps {
        sh '''
        # Remove the old container if it exists
        if [ "$(docker ps -aq -f name=svr-9956725d)" ]; then
            docker rm -f svr-9956725d
        fi

        # Ensure port 32900 is not in use
        if lsof -i:32900; then
            echo "Port 32900 is in use. Freeing it up."
            kill -9 $(lsof -t -i:32900) || true
        fi

        # Restart Docker service to ensure the port is free
       sudo systemctl restart docker

        # Start the new container
        docker run -d --name svr-9956725d -p 32900:80 img-base-9956725d

        echo "Server Setup Completed."
        '''
    }
}




        stage('ST3-Parallel-9956725d') {

            parallel {

                stage('ST3a-9956725d') {

                    steps {

                        echo 'XSS Test Completed and Report Generated.'

                    }

                }

                stage('ST3b-9956725d') {

                    steps {

                        echo 'SQLi Test Completed and Report Generated.'

                    }

                }

            }

        }

        stage('ST4-9956725d') {

            steps {

                echo 'Security Reports Checked.'

            }

        }

        stage('ST5-9956725d') {

            steps {

                input message: 'Hello 9956725d, permission to proceed to next phase?'
                If ”Proceed” is selected, 
                echo “ST5-9956725d : Approve to proceed to next phase”
                If “Abort” is selected,  whole pipeline aborts.

            }

        }

        stage('ST6-9956725d') {

            steps {

                echo 'Pipeline Completed Successfully.'

            }

        }

    }

}


